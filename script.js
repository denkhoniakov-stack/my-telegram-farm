document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram.WebApp;
    tg.ready();
    tg.expand();

    // --- –ë–ê–ó–ê –î–ê–ù–ù–´–• –ü–†–ï–î–ú–ï–¢–û–í ---
    const INVENTORY_DATA = {
        'super-rake': { name: '–°—É–ø–µ—Ä-–õ–µ–π–∫–∞', price: 150, bonus: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —É—Ä–æ–∂–∞–π –Ω–∞ 5% (–ø–∞—Å—Å–∏–≤–Ω–æ)' },
        'golden-spade': { name: '–ó–æ–ª–æ—Ç–∞—è –õ–æ–ø–∞—Ç–∞', price: 250, bonus: '–£—Å–∫–æ—Ä—è–µ—Ç –ø–æ—Å–∞–¥–∫—É –Ω–∞ 15% (–ø–∞—Å—Å–∏–≤–Ω–æ)' },
        'smart-scarecrow': { name: '–£–º–Ω–æ–µ –ü—É–≥–∞–ª–æ', price: 200, bonus: '–°–Ω–∏–∂–∞–µ—Ç —à–∞–Ω—Å –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —É—Ä–æ–∂–∞—è –Ω–∞ 10% (–ø–∞—Å—Å–∏–≤–Ω–æ)' },
        'turbo-fertilizer': { name: '–£–¥–æ–±—Ä–µ–Ω–∏–µ "–¢—É—Ä–±–æ-–†–æ—Å—Ç"', price: 50, bonus: '–£—Å–∫–æ—Ä—è–µ—Ç —Ä–æ—Å—Ç 1 —Ä–∞—Å—Ç–µ–Ω–∏—è –Ω–∞ 25% (—Ä–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ)' },
        'farmer-gloves': { name: '–§–µ—Ä–º–µ—Ä—Å–∫–∏–µ –ü–µ—Ä—á–∞—Ç–∫–∏', price: 300, bonus: '–®–∞–Ω—Å 2% –Ω–∞ –¥–≤–æ–π–Ω–æ–π —É—Ä–æ–∂–∞–π (–ø–∞—Å—Å–∏–≤–Ω–æ)' }
    };

    const BOOSTERS_DATA = {
        'sun-rain': { name: '–°–æ–ª–Ω–µ—á–Ω—ã–π –î–æ–∂–¥—å', price: 100, bonus: '–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —É—Å–∫–æ—Ä—è–µ—Ç –≤—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –Ω–∞ 30%' },
        'fertility-elixir': { name: '–≠–ª–∏–∫—Å–∏—Ä –ü–ª–æ–¥–æ—Ä–æ–¥–∏—è', price: 75, bonus: '–£—Å–∫–æ—Ä—è–µ—Ç —Ä–æ—Å—Ç –≤—Å–µ—Ö —Å–µ–º—è–Ω –Ω–∞ 50% –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç' },
        'golden-hour': { name: '–ó–æ–ª–æ—Ç–æ–π –ß–∞—Å', price: 120, bonus: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –≤—Å–µ–≥–æ —É—Ä–æ–∂–∞—è –Ω–∞ 20% –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞' }
    };

    const DECOR_DATA = {
        'weather-vane': { name: '–í–µ—Å–µ–ª—ã–π –§–ª—é–≥–µ—Ä', price: 500, bonus: '–®–∞–Ω—Å –Ω–∞–π—Ç–∏ —Ä–µ–¥–∫–∏–µ —Å–µ–º–µ–Ω–∞ +1% (–ø–∞—Å—Å–∏–≤–Ω–æ)' },
        'beehive': { name: '–ü—á–µ–ª–∏–Ω—ã–π –£–ª–µ–π', price: 750, bonus: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤–µ—Å—å —É—Ä–æ–∂–∞–π –Ω–∞ 2% (–ø–∞—Å—Å–∏–≤–Ω–æ)' }
    };


    const PLANT_DATA = {
        'ü•ï': { name: '–ú–æ—Ä–∫–æ–≤—å', growTime: 1000, seedCost: 1.00, sellPrice: 1.54 },
        'üçÖ': { name: '–ü–æ–º–∏–¥–æ—Ä', growTime: 3000, seedCost: 3.00, sellPrice: 4.62 },
        'üçÜ': { name: '–ë–∞–∫–ª–∞–∂–∞–Ω', growTime: 5000, seedCost: 5.00, sellPrice: 7.70 },
        'üåΩ': { name: '–ö—É–∫—É—Ä—É–∑–∞', growTime: 7000, seedCost: 7.00, sellPrice: 10.78 },
        'üçì': { name: '–ö–ª—É–±–Ω–∏–∫–∞', growTime: 10000, seedCost: 10.00, sellPrice: 15.40 }
    };
    
    let gameState = {
        balance: 100,
        warehouse: {},
        seedInventory: { 'ü•ï': 3 },
        items: {
        }    
    };

    const balanceAmountElement = document.getElementById('balance-amount');
    const gardenContainer = document.getElementById('garden-container');
    const seedMenu = document.getElementById('seed-menu');
    let activeBed = null;
    const warehouseModal = document.getElementById('warehouse-modal');
    const shopModal = document.getElementById('shop-modal');
    const warehouseList = document.getElementById('warehouse-list');
    const sellAllButton = document.getElementById('sell-all-button');
    const shopList = document.getElementById('shop-list');
    const navButtons = document.querySelectorAll('.nav-button');
    const navFarmBtn = document.getElementById('nav-farm');
    const navWarehouseBtn = document.getElementById('nav-warehouse');
    const navShopBtn = document.getElementById('nav-shop');

    function saveGameData() { localStorage.setItem('farmGameState_v4', JSON.stringify(gameState)); }
    function loadGameData() {
        const savedData = localStorage.getItem('farmGameState_v4');
        if (savedData) {
            gameState = JSON.parse(savedData);
            if (!gameState.seedInventory) gameState.seedInventory = {};
            if (!gameState.warehouse) gameState.warehouse = {};
            if (!gameState.items) gameState.items = {};
        }
        updateBalanceDisplay();
    }

    navWarehouseBtn.addEventListener('click', () => {
    // –õ–æ–≥–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–∫–ª–∞–¥–∞
        warehouseModal.classList.remove('hidden');
        updateWarehouseDisplay();
    });

// --- –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò –ú–ê–ì–ê–ó–ò–ù–ê ---
    navShopBtn.addEventListener('click', () => {
        shopModal.classList.remove('hidden');
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    // –Ω–∞–ø—Ä–∏–º–µ—Ä, showShopTab('seeds'); 
    });

// –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const closeButtons = document.querySelectorAll('.close-button');
    closeButtons.forEach(button => {
        button.addEventListener('click', () => {
        // –ü—Ä—è—á–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
            warehouseModal.classList.add('hidden');
            shopModal.classList.add('hidden');
        });
    });

    function updateBalanceDisplay() { balanceAmountElement.innerText = gameState.balance.toFixed(2); }
    function updateWarehouseDisplay() {
        warehouseList.innerHTML = '';
        const items = Object.keys(gameState.warehouse).filter(key => gameState.warehouse[key] > 0);
        if (items.length === 0) {
            warehouseList.innerHTML = '<li>–°–∫–ª–∞–¥ —É—Ä–æ–∂–∞—è –ø—É—Å—Ç</li>';
            sellAllButton.style.display = 'none';
            return;
        }
        sellAllButton.style.display = 'block';
        items.forEach(crop => {
            const li = document.createElement('li');
            li.innerHTML = `<span>${crop} ${PLANT_DATA[crop].name}:</span> <span>${gameState.warehouse[crop]} —à—Ç.</span>`;
            li.style.display = 'flex';
            li.style.justifyContent = 'space-between';
            warehouseList.appendChild(li);
        });
    }

    function plantSeed(bed, seed) {
        const plantInfo = PLANT_DATA[seed];
        const plantElement = document.createElement('div');
        plantElement.classList.add('plant');
        plantElement.innerText = 'üå±';
        bed.appendChild(plantElement);

        setTimeout(() => {
            plantElement.innerText = seed;
            plantElement.addEventListener('click', (e) => {
                e.stopPropagation();
                animateHarvest(plantElement, seed);
                gameState.warehouse[seed] = (gameState.warehouse[seed] || 0) + 1;
                saveGameData();
                bed.innerHTML = '';
                tg.HapticFeedback.notificationOccurred('success');
            }, { once: true });
        }, plantInfo.growTime);
    }
    
    function animateHarvest(startElement, seed) {
        const endElement = navWarehouseBtn;
        const flyingCrop = document.createElement('div');
        flyingCrop.innerText = seed;
        flyingCrop.className = 'flying-crop';
        document.body.appendChild(flyingCrop);
        const startRect = startElement.getBoundingClientRect();
        const endRect = endElement.getBoundingClientRect();
        flyingCrop.style.left = `${startRect.left + startRect.width / 2 - 18}px`;
        flyingCrop.style.top = `${startRect.top + startRect.height / 2 - 18}px`;
        const deltaX = (endRect.left + endRect.width / 2) - (startRect.left + startRect.width / 2);
        const deltaY = (endRect.top + endRect.height / 2) - (startRect.top + startRect.height / 2);
        flyingCrop.style.setProperty('--target-x', `${deltaX}px`);
        flyingCrop.style.setProperty('--target-y', `${deltaY}px`);
        flyingCrop.addEventListener('animationend', () => flyingCrop.remove());
    }

    gardenContainer.addEventListener('click', (event) => {
        const bed = event.target.closest('.garden-bed.available');
        if (bed && bed.innerHTML === '') {
            activeBed = bed;
            showPlantingMenu(bed);
        }
    });
    
    function showPlantingMenu(bed) {
        const availableSeeds = Object.keys(gameState.seedInventory).filter(seed => gameState.seedInventory[seed] > 0);
        if (availableSeeds.length === 0) {
            tg.showAlert('–£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—è–Ω –¥–ª—è –ø–æ—Å–∞–¥–∫–∏. –ó–∞–π–¥–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω!');
            return;
        }
        seedMenu.innerHTML = '';
        const radius = 80;
        const angleStep = availableSeeds.length > 1 ? 120 / (availableSeeds.length - 1) : 0;
        availableSeeds.forEach((seed, index) => {
            const angle = -60 + (angleStep * index);
            const option = document.createElement('div');
            option.className = 'seed-option';
            option.dataset.seed = seed;
            option.innerText = seed;
            option.style.transform = `rotate(${angle}deg) translateX(${radius}px) rotate(${-angle}deg)`;
            option.addEventListener('click', (e) => {
                e.stopPropagation();
                handleSeedSelection(seed);
            });
            seedMenu.appendChild(option);
        });
        const rect = bed.getBoundingClientRect();
        seedMenu.style.left = `${rect.left + rect.width / 2 + window.scrollX}px`;
        seedMenu.style.top = `${rect.top + rect.height / 2 + window.scrollY}px`;
        seedMenu.classList.remove('hidden');
    }
    
    function handleSeedSelection(seedType) {
        if (!activeBed) return;
        if ((gameState.seedInventory[seedType] || 0) > 0) {
            gameState.seedInventory[seedType]--;
            saveGameData();
            hideSeedMenu();
            plantSeed(activeBed, seedType);
            activeBed = null;
        } else {
            tg.showAlert(`–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–µ–º–µ–Ω–∞ ${PLANT_DATA[seedType].name}!`);
        }
    }

    function hideSeedMenu() {
        seedMenu.classList.add('hidden');
    }
    document.addEventListener('click', (e) => {
        if (!e.target.closest('#garden-container') && !e.target.closest('#seed-menu')) {
            hideSeedMenu();
        }
    });

    navButtons.forEach(btn => btn.addEventListener('click', () => {
        document.querySelectorAll('.modal').forEach(m => m.classList.add('hidden'));
        navButtons.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        hideSeedMenu();
        switch (btn.id) {
            case 'nav-warehouse': 
                updateWarehouseDisplay(); 
                warehouseModal.classList.remove('hidden'); 
                break;
            case 'nav-shop': 
                populateShop();      // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ, –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Å–µ–º–µ–Ω–∞
                populateShopTabs();  // <-- –í–û–¢ –≠–¢–ê –ù–û–í–ê–Ø –°–¢–†–û–ö–ê, –æ–Ω–∞ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
                shopModal.classList.remove('hidden'); 
                break;
            case 'nav-tasks': 
            case 'nav-leaders': 
            case 'nav-settings':
                tg.showAlert(`–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!`);
                navFarmBtn.click();
                break;
        }
    }));
    
    sellAllButton.addEventListener('click', () => {
        let totalProfit = 0;
        Object.keys(gameState.warehouse).forEach(crop => {
            totalProfit += gameState.warehouse[crop] * PLANT_DATA[crop].sellPrice;
        });
        if (totalProfit === 0) return;
        gameState.balance += totalProfit;
        gameState.warehouse = {};
        saveGameData();
        updateBalanceDisplay();
        updateWarehouseDisplay();
        tg.showPopup({ title: '–£—Ä–æ–∂–∞–π –ø—Ä–æ–¥–∞–Ω!', message: `–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ ${totalProfit.toFixed(2)} –º–æ–Ω–µ—Ç.` });
    });
    
    function populateShop() {
        shopList.innerHTML = '';
        Object.keys(PLANT_DATA).forEach(seed => {
            const plant = PLANT_DATA[seed];
            const currentSeeds = gameState.seedInventory[seed] || 0;
            const li = document.createElement('li');
            li.className = 'shop-item';
            li.innerHTML = `<div class="shop-item-icon">${seed}</div><div class="shop-item-details"><div class="shop-item-title">–°–µ–º–µ–Ω–∞ ${plant.name.toLowerCase()}</div><div class="shop-item-info"><span>–í—Ä–µ–º—è —Ä–æ—Å—Ç–∞: ${plant.growTime / 1000}—Å</span> | <span>–ü—Ä–æ–¥–∞–∂–∞: ${plant.sellPrice.toFixed(2)} ü™ô</span></div></div><div class="shop-item-buy"><button class="buy-button" data-seed="${seed}">${plant.seedCost.toFixed(2)} ü™ô</button><div class="seed-inventory-count" id="inv-count-${seed}">–í –Ω–∞–ª–∏—á–∏–∏: ${currentSeeds}</div></div>`;
            shopList.appendChild(li);
        });
    }
    
    
    document.querySelectorAll('.modal').forEach(modal => {
        modal.querySelector('.close-button').addEventListener('click', () => {
            modal.classList.add('hidden');
            navFarmBtn.click();
        });
    });

    loadGameData();
});
// --- –õ–û–ì–ò–ö–ê –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –í–ö–õ–ê–î–û–ö –í –ú–ê–ì–ê–ó–ò–ù–ï ---
const shopTabsContainer = document.querySelector('.shop-tabs');
const tabContents = document.querySelectorAll('.shop-tab-content');

if (shopTabsContainer) {
    shopTabsContainer.addEventListener('click', (e) => {
        if (e.target.classList.contains('tab-button')) {
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            shopTabsContainer.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            tabContents.forEach(content => content.classList.remove('active'));

            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
            e.target.classList.add('active');
            
            // –ù–∞—Ö–æ–¥–∏–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            const tabId = e.target.dataset.tab;
            document.getElementById(`${tabId}-tab`).classList.add('active');
        }
    });
}
function getHarvestBonus() {
    let bonus = 1.0; // 1.0 - —ç—Ç–æ 100% (–±–µ–∑ –±–æ–Ω—É—Å–∞)
    if (gameState.items['super-rake']) bonus += 0.05; // +5% –æ—Ç –ª–µ–π–∫–∏
    if (gameState.items['beehive']) bonus += 0.02;    // +2% –æ—Ç —É–ª—å—è
    return bonus;
}
function getGrowTime(baseTime) {
    let finalTime = baseTime;
    if (gameState.items['golden-spade']) finalTime *= 0.85; // -15% –≤—Ä–µ–º–µ–Ω–∏
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —É—Å–∫–æ—Ä–∏—Ç–µ–ª–µ–π
    return finalTime;
}
function populateShopTabs() {
    const inventoryList = document.querySelector('#inventory-tab');
    const boostersList = document.querySelector('#boosters-tab');
    const decorList = document.querySelector('#decor-tab');

    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    inventoryList.innerHTML = '';
    boostersList.innerHTML = '';
    decorList.innerHTML = '';

    // --- 1. –ó–ê–ü–û–õ–ù–Ø–ï–ú –í–ö–õ–ê–î–ö–£ "–ò–ù–í–ï–ù–¢–ê–†–¨" ---
    for (const key in INVENTORY_DATA) {
        const item = INVENTORY_DATA[key];
        const li = document.createElement('li');
        li.className = 'shop-item';
        li.innerHTML = `
            <div class="shop-item-icon">üõ†Ô∏è</div>
            <div class="shop-item-details">
                <div class="shop-item-title">${item.name}</div>
                <div class="shop-item-info">${item.bonus}</div>
            </div>
            <div class="shop-item-buy">
                <button class="buy-button" data-item-id="${key}" data-item-type="inventory">${item.price} ü™ô</button>
            </div>`;
        inventoryList.appendChild(li);
    }

    // --- 2. –ó–ê–ü–û–õ–ù–Ø–ï–ú –í–ö–õ–ê–î–ö–£ "–£–°–ö–û–†–ò–¢–ï–õ–ò" ---
    for (const key in BOOSTERS_DATA) {
        const item = BOOSTERS_DATA[key];
        const li = document.createElement('li');
        li.className = 'shop-item';
        li.innerHTML = `
            <div class="shop-item-icon">‚ö°Ô∏è</div>
            <div class="shop-item-details">
                <div class="shop-item-title">${item.name}</div>
                <div class="shop-item-info">${item.bonus}</div>
            </div>
            <div class="shop-item-buy">
                <button class="buy-button" data-item-id="${key}" data-item-type="booster">${item.price} ü™ô</button>
            </div>`;
        boostersList.appendChild(li);
    }

    // --- 3. –ó–ê–ü–û–õ–ù–Ø–ï–ú –í–ö–õ–ê–î–ö–£ "–î–ï–ö–û–†" ---
    for (const key in DECOR_DATA) {
        const item = DECOR_DATA[key];
        const li = document.createElement('li');
        li.className = 'shop-item';
        li.innerHTML = `
            <div class="shop-item-icon">üé®</div>
            <div class="shop-item-details">
                <div class="shop-item-title">${item.name}</div>
                <div class="shop-item-info">${item.bonus}</div>
            </div>
            <div class="shop-item-buy">
                <button class="buy-button" data-item-id="${key}" data-item-type="decor">${item.price} ü™ô</button>
            </div>`;
        decorList.appendChild(li);
    }
}


// --- –í–°–¢–ê–í–¨–¢–ï –≠–¢–û–¢ –ù–û–í–´–ô –ë–õ–û–ö –ö–û–î–ê ---

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
shopModal.addEventListener('click', (e) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –±—ã–ª –∏–º–µ–Ω–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ "–∫—É–ø–∏—Ç—å"
    if (!e.target.classList.contains('buy-button')) {
        return;
    }

    const button = e.target;
    const itemType = button.dataset.itemType; // 'inventory', 'booster', 'decor' –∏–ª–∏ undefined –¥–ª—è —Å–µ–º—è–Ω
    const itemId = button.dataset.itemId;     // ID –ø—Ä–µ–¥–º–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'super-rake')
    const seedId = button.dataset.seed;       // ID —Å–µ–º—è–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'ü•ï')

    let price = 0;
    let itemData = null;

    // --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø–æ–∫—É–ø–∞–µ—Ç—Å—è ---
    if (seedId) {
        // –ü–æ–∫—É–ø–∫–∞ —Å–µ–º—è–Ω
        itemData = PLANT_DATA[seedId];
        price = itemData.seedCost;
    } else if (itemId && itemType) {
        // –ü–æ–∫—É–ø–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, —É—Å–∫–æ—Ä–∏—Ç–µ–ª—è –∏–ª–∏ –¥–µ–∫–æ—Ä–∞
        switch (itemType) {
            case 'inventory': itemData = INVENTORY_DATA[itemId]; break;
            case 'booster':   itemData = BOOSTERS_DATA[itemId]; break;
            case 'decor':     itemData = DECOR_DATA[itemId]; break;
        }
        if (itemData) {
            price = itemData.price;
        }
    }

    if (!itemData) return; // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    // --- –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ ---
    if (gameState.balance < price) {
        tg.showAlert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!');
        return;
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç (–¥–ª—è –ø–∞—Å—Å–∏–≤–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π)
    if (itemType === 'inventory' || itemType === 'decor') {
        if (gameState.items[itemId]) {
            tg.showAlert('–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å!');
            return;
        }
    }

    // --- –ü—Ä–æ–≤–æ–¥–∏–º –ø–æ–∫—É–ø–∫—É ---
    gameState.balance -= price;

    if (seedId) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–º–µ–Ω–∞
        gameState.seedInventory[seedId] = (gameState.seedInventory[seedId] || 0) + 1;
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–µ–º—è–Ω –≤ –º–∞–≥–∞–∑–∏–Ω–µ
        document.getElementById(`inv-count-${seedId}`).innerText = `–í –Ω–∞–ª–∏—á–∏–∏: ${gameState.seedInventory[seedId]}`;
    } else if (itemId) {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
        gameState.items[itemId] = true; // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –∫—É–ø–ª–µ–Ω
        // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π, —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –∫—É–ø–∏—Ç—å —Å–Ω–æ–≤–∞
        button.disabled = true;
        button.innerText = '–ö—É–ø–ª–µ–Ω–æ';
    }

    // --- –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
    updateBalanceDisplay();
    saveGameData();
    tg.HapticFeedback.notificationOccurred('success');
});
