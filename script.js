document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram.WebApp;
    tg.ready();

    // --- –ù–ê–°–¢–†–û–ô–ö–ò –ò–ì–†–´ ---
    const PLANT_DATA = {
        'ü•ï': { name: '–ú–æ—Ä–∫–æ–≤—å', growTime: 1000, seedCost: 1.00, sellPrice: 1.54 },
        'üçÖ': { name: '–ü–æ–º–∏–¥–æ—Ä', growTime: 3000, seedCost: 3.00, sellPrice: 4.62 },
        'üçÜ': { name: '–ë–∞–∫–ª–∞–∂–∞–Ω', growTime: 5000, seedCost: 5.00, sellPrice: 7.70 },
        'üåΩ': { name: '–ö—É–∫—É—Ä—É–∑–∞', growTime: 7000, seedCost: 7.00, sellPrice: 10.78 },
        'üçì': { name: '–ö–ª—É–±–Ω–∏–∫–∞', growTime: 10000, seedCost: 10.00, sellPrice: 15.40 }
    };
    
    // --- –î–ê–ù–ù–´–ï –ò–ì–†–û–ö–ê ---
    let gameState = {
        balance: 100,
        warehouse: {}
    };

    // --- –≠–õ–ï–ú–ï–ù–¢–´ DOM ---
    const balanceAmountElement = document.getElementById('balance-amount');
    const warehouseList = document.getElementById('warehouse-list');
    const sellAllButton = document.getElementById('sell-all-button');
    const menuButton = document.getElementById('menu-button');
    const menuNav = document.getElementById('menu-nav');
    const seedMenu = document.getElementById('seed-menu');
    const availableBeds = document.querySelectorAll('.garden-bed.available');
    let activeBed = null;

    // --- –§–£–ù–ö–¶–ò–ò –°–û–•–†–ê–ù–ï–ù–ò–Ø –ò –ó–ê–ì–†–£–ó–ö–ò ---
    function saveGameData() {
        localStorage.setItem('farmGameState', JSON.stringify(gameState));
    }

    function loadGameData() {
        const savedData = localStorage.getItem('farmGameState');
        if (savedData) {
            gameState = JSON.parse(savedData);
        }
        updateBalanceDisplay();
    }

    // --- –§–£–ù–ö–¶–ò–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ò–ù–¢–ï–†–§–ï–ô–°–ê ---
    function updateBalanceDisplay() {
        balanceAmountElement.innerText = gameState.balance.toFixed(2);
    }

    function updateWarehouseDisplay() {
        warehouseList.innerHTML = '';
        const items = Object.keys(gameState.warehouse);
        if (items.length === 0) {
            warehouseList.innerHTML = '<li>–°–∫–ª–∞–¥ –ø—É—Å—Ç</li>';
            sellAllButton.style.display = 'none'; // –ü—Ä—è—á–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –Ω–µ—á–µ–≥–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å
            return;
        }
        sellAllButton.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        items.forEach(crop => {
            const li = document.createElement('li');
            li.innerText = `${crop} ${PLANT_DATA[crop].name}: ${gameState.warehouse[crop]} —à—Ç.`;
            warehouseList.appendChild(li);
        });
    }

    // --- –õ–û–ì–ò–ö–ê –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ---
    menuButton.addEventListener('click', () => {
        // –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Å–∫–ª–∞–¥–µ
        if (!menuNav.classList.contains('show')) {
            updateWarehouseDisplay();
        }
        menuNav.classList.toggle('show');
    });

    // --- –õ–û–ì–ò–ö–ê –ì–†–Ø–î–û–ö –ò –ü–û–°–ê–î–ö–ò (–ö–û–ù–¶–ï–ü–¶–ò–Ø –°–ï–ú–Ø–ù) ---
    availableBeds.forEach(bed => {
        bed.addEventListener('click', () => {
            if (bed.innerHTML !== '') return;
            activeBed = bed;
            const rect = bed.getBoundingClientRect();
            seedMenu.style.left = `${rect.left + rect.width / 2 - 50 + window.scrollX}px`;
            seedMenu.style.top = `${rect.top + rect.height / 2 - 50 + window.scrollY}px`;
            seedMenu.classList.remove('hidden');
        });
    });

    seedMenu.querySelectorAll('.seed-option').forEach(option => {
        option.addEventListener('click', () => {
            if (!activeBed) return;
            const seedType = option.dataset.seed;
            const plant = PLANT_DATA[seedType];

            if (gameState.balance < plant.seedCost) {
                tg.showAlert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–µ–º—è–Ω!');
                return;
            }

            gameState.balance -= plant.seedCost;
            updateBalanceDisplay();
            saveGameData();

            hideSeedMenu();
            plantSeed(activeBed, seedType);
            activeBed = null;
        });
    });

    function plantSeed(bed, seed) {
        const plantInfo = PLANT_DATA[seed];
        const plantElement = document.createElement('div');
        plantElement.classList.add('plant');
        plantElement.innerText = 'üå±'; // –°–∞–∂–∞–µ–º —Ä–æ—Å—Ç–æ–∫
        bed.appendChild(plantElement);

        setTimeout(() => {
            plantElement.innerText = seed; // –†–æ—Å—Ç–æ–∫ –≤—ã—Ä–∞—Å—Ç–∞–µ—Ç –≤ –æ–≤–æ—â
            plantElement.addEventListener('click', (e) => {
                e.stopPropagation();
                
                gameState.warehouse[seed] = (gameState.warehouse[seed] || 0) + 1;
                saveGameData();

                bed.innerHTML = '';
                tg.HapticFeedback.notificationOccurred('success');
                tg.showPopup({
                    title: '–£—Ä–æ–∂–∞–π —Å–æ–±—Ä–∞–Ω!',
                    message: `1 ${plantInfo.name} –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥.`,
                    buttons: [{type: 'ok'}]
                });
            }, { once: true });
        }, plantInfo.growTime);
    }

    // --- –õ–û–ì–ò–ö–ê –ü–†–û–î–ê–ñ–ò –°–û –°–ö–õ–ê–î–ê ---
    sellAllButton.addEventListener('click', () => {
        let totalProfit = 0;
        Object.keys(gameState.warehouse).forEach(crop => {
            totalProfit += gameState.warehouse[crop] * PLANT_DATA[crop].sellPrice;
        });

        if (totalProfit === 0) {
            tg.showAlert('–°–∫–ª–∞–¥ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å!');
            return;
        }

        gameState.balance += totalProfit;
        gameState.warehouse = {};
        saveGameData();

        updateBalanceDisplay();
        updateWarehouseDisplay();
        tg.showPopup({
            title: '–£—Ä–æ–∂–∞–π –ø—Ä–æ–¥–∞–Ω!',
            message: `–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ ${totalProfit.toFixed(2)} –º–æ–Ω–µ—Ç.`,
            buttons: [{type: 'ok'}]
        });
    });

    // --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
    function hideSeedMenu() {
        seedMenu.classList.add('hidden');
    }
    document.addEventListener('click', (event) => {
        if (!event.target.closest('.garden-bed.available') && !event.target.closest('#seed-menu')) {
            hideSeedMenu();
        }
        if (!menuButton.contains(event.target) && !menuNav.contains(event.target)) {
            menuNav.classList.remove('show');
        }
    });

    // --- –ù–ê–ß–ê–õ–¨–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ò–ì–†–´ ---
    loadGameData();
});
