// –ù–ê–ß–ù–ò–¢–ï –ö–û–ü–ò–†–û–í–ê–¢–¨ –û–¢–°–Æ–î–ê

document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram.WebApp;
    tg.ready();
    tg.expand();

    // --- –ë–ê–ó–ê –î–ê–ù–ù–´–• –ü–†–ï–î–ú–ï–¢–û–í ---
    const INVENTORY_DATA = {
        'super-rake': { name: '–°—É–ø–µ—Ä-–õ–µ–π–∫–∞', price: 150, bonus: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —É—Ä–æ–∂–∞–π –Ω–∞ 5% (–ø–∞—Å—Å–∏–≤–Ω–æ)' },
        'golden-spade': { name: '–ó–æ–ª–æ—Ç–∞—è –õ–æ–ø–∞—Ç–∞', price: 250, bonus: '–£—Å–∫–æ—Ä—è–µ—Ç –ø–æ—Å–∞–¥–∫—É –Ω–∞ 15% (–ø–∞—Å—Å–∏–≤–Ω–æ)' },
        'smart-scarecrow': { name: '–£–º–Ω–æ–µ –ü—É–≥–∞–ª–æ', price: 200, bonus: '–°–Ω–∏–∂–∞–µ—Ç —à–∞–Ω—Å –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —É—Ä–æ–∂–∞—è –Ω–∞ 10% (–ø–∞—Å—Å–∏–≤–Ω–æ)' },
        'turbo-fertilizer': { name: '–£–¥–æ–±—Ä–µ–Ω–∏–µ "–¢—É—Ä–±–æ-–†–æ—Å—Ç"', price: 50, bonus: '–£—Å–∫–æ—Ä—è–µ—Ç —Ä–æ—Å—Ç 1 —Ä–∞—Å—Ç–µ–Ω–∏—è –Ω–∞ 25% (—Ä–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ)' },
        'farmer-gloves': { name: '–§–µ—Ä–º–µ—Ä—Å–∫–∏–µ –ü–µ—Ä—á–∞—Ç–∫–∏', price: 300, bonus: '–®–∞–Ω—Å 2% –Ω–∞ –¥–≤–æ–π–Ω–æ–π —É—Ä–æ–∂–∞–π (–ø–∞—Å—Å–∏–≤–Ω–æ)' }
    };

    const BOOSTERS_DATA = {
        'sun-rain': { name: '–°–æ–ª–Ω–µ—á–Ω—ã–π –î–æ–∂–¥—å', price: 100, bonus: '–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —É—Å–∫–æ—Ä—è–µ—Ç –≤—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –Ω–∞ 30%' },
        'fertility-elixir': { name: '–≠–ª–∏–∫—Å–∏—Ä –ü–ª–æ–¥–æ—Ä–æ–¥–∏—è', price: 75, bonus: '–£—Å–∫–æ—Ä—è–µ—Ç —Ä–æ—Å—Ç –≤—Å–µ—Ö —Å–µ–º—è–Ω –Ω–∞ 50% –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç' },
        'golden-hour': { name: '–ó–æ–ª–æ—Ç–æ–π –ß–∞—Å', price: 120, bonus: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –≤—Å–µ–≥–æ —É—Ä–æ–∂–∞—è –Ω–∞ 20% –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞' }
    };

    const DECOR_DATA = {
        'weather-vane': { name: '–í–µ—Å–µ–ª—ã–π –§–ª—é–≥–µ—Ä', price: 500, bonus: '–®–∞–Ω—Å –Ω–∞–π—Ç–∏ —Ä–µ–¥–∫–∏–µ —Å–µ–º–µ–Ω–∞ +1% (–ø–∞—Å—Å–∏–≤–Ω–æ)' },
        'beehive': { name: '–ü—á–µ–ª–∏–Ω—ã–π –£–ª–µ–π', price: 750, bonus: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤–µ—Å—å —É—Ä–æ–∂–∞–π –Ω–∞ 2% (–ø–∞—Å—Å–∏–≤–Ω–æ)' }
    };

    const PLANT_DATA = {
        'ü•ï': { name: '–ú–æ—Ä–∫–æ–≤—å', growTime: 1000, seedCost: 1.00, sellPrice: 1.54 },
        'üçÖ': { name: '–ü–æ–º–∏–¥–æ—Ä', growTime: 3000, seedCost: 3.00, sellPrice: 4.62 },
        'üçÜ': { name: '–ë–∞–∫–ª–∞–∂–∞–Ω', growTime: 5000, seedCost: 5.00, sellPrice: 7.70 },
        'üåΩ': { name: '–ö—É–∫—É—Ä—É–∑–∞', growTime: 7000, seedCost: 7.00, sellPrice: 10.78 },
        'üçì': { name: '–ö–ª—É–±–Ω–∏–∫–∞', growTime: 10000, seedCost: 10.00, sellPrice: 15.40 }
    };
    
    let gameState = {
        balance: 100,
        warehouse: {},
        seedInventory: { 'ü•ï': 3 },
        items: {}      
    };

    // --- –ü–û–õ–£–ß–ï–ù–ò–ï –≠–õ–ï–ú–ï–ù–¢–û–í –°–¢–†–ê–ù–ò–¶–´ ---
    const balanceAmountElement = document.getElementById('balance-amount');
    const gardenContainer = document.getElementById('garden-container');
    const seedMenu = document.getElementById('seed-menu');
    const warehouseModal = document.getElementById('warehouse-modal');
    const shopModal = document.getElementById('shop-modal');
    const warehouseList = document.getElementById('warehouse-list');
    const sellAllButton = document.getElementById('sell-all-button');
    const shopList = document.getElementById('shop-list');
    const navButtons = document.querySelectorAll('.nav-button');
    const navFarmBtn = document.getElementById('nav-farm');
    const shopTabsContainer = document.querySelector('.shop-tabs');
    const tabContents = document.querySelectorAll('.shop-tab-content');
    
    let activeBed = null;

    // --- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò–ì–†–´ ---
    function saveGameData() { localStorage.setItem('farmGameState_v4', JSON.stringify(gameState)); }

    function loadGameData() {
        const savedData = localStorage.getItem('farmGameState_v4');
        if (savedData) {
            gameState = JSON.parse(savedData);
            if (!gameState.seedInventory) gameState.seedInventory = {};
            if (!gameState.warehouse) gameState.warehouse = {};
            if (!gameState.items) gameState.items = {};
        }
        updateBalanceDisplay();
    }

    function updateBalanceDisplay() { balanceAmountElement.innerText = gameState.balance.toFixed(2); }
    
    // --- –í–°–ï –§–£–ù–ö–¶–ò–ò –ú–ê–ì–ê–ó–ò–ù–ê ---

    function populateShopSeeds() {
        const shopListContainer = document.querySelector('#seeds-tab ul');
        if (!shopListContainer) return;

        shopListContainer.innerHTML = '';
        Object.keys(PLANT_DATA).forEach(seed => {
            const plant = PLANT_DATA[seed];
            const currentSeeds = gameState.seedInventory[seed] || 0;
            const li = document.createElement('li');
            li.className = 'shop-item';
            li.innerHTML = `<div class="shop-item-icon">${seed}</div><div class="shop-item-details"><div class="shop-item-title">–°–µ–º–µ–Ω–∞ ${plant.name.toLowerCase()}</div><div class="shop-item-info"><span>–†–æ—Å—Ç: ${plant.growTime / 1000}—Å</span> | <span>–ü—Ä–æ–¥–∞–∂–∞: ${plant.sellPrice.toFixed(2)} ü™ô</span></div></div><div class="shop-item-buy"><button class="buy-button" data-seed="${seed}">${plant.seedCost.toFixed(2)} ü™ô</button><div class="seed-inventory-count" id="inv-count-${seed}">–í –Ω–∞–ª–∏—á–∏–∏: ${currentSeeds}</div></div>`;
            shopListContainer.appendChild(li);
        });
    }

    function populateShopTabs() {
        const lists = {
            inventory: { container: document.querySelector('#inventory-tab'), data: INVENTORY_DATA, icon: 'üõ†Ô∏è' },
            boosters: { container: document.querySelector('#boosters-tab'), data: BOOSTERS_DATA, icon: '‚ö°Ô∏è' },
            decor: { container: document.querySelector('#decor-tab'), data: DECOR_DATA, icon: 'üé®' }
        };

        for (const type in lists) {
            const { container, data, icon } = lists[type];
            if (!container) continue;

            container.innerHTML = ''; // –û—á–∏—Å—Ç–∫–∞
            const ul = document.createElement('ul');
            ul.style.padding = '0'; // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã —É —Å–ø–∏—Å–∫–∞
            
            for (const key in data) {
                const item = data[key];
                const li = document.createElement('li');
                li.className = 'shop-item';
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—É–ø–ª–µ–Ω –ª–∏ –ø—Ä–µ–¥–º–µ—Ç, –∏ –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
                const isItemOwned = gameState.items[key];
                const buttonHTML = isItemOwned
                    ? `<button class="buy-button" disabled>–ö—É–ø–ª–µ–Ω–æ</button>`
                    : `<button class="buy-button" data-item-id="${key}" data-item-type="${type}">${item.price} ü™ô</button>`;

                li.innerHTML = `
                    <div class="shop-item-icon">${icon}</div>
                    <div class="shop-item-details">
                        <div class="shop-item-title">${item.name}</div>
                        <div class="shop-item-info">${item.bonus}</div>
                    </div>
                    <div class="shop-item-buy">${buttonHTML}</div>`;
                ul.appendChild(li);
            }
            container.appendChild(ul);
        }
    }
    
    // --- –ï–î–ò–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–ê–í–ò–ì–ê–¶–ò–ò ---
    navButtons.forEach(btn => btn.addEventListener('click', () => {
        document.querySelectorAll('.modal').forEach(m => m.classList.add('hidden'));
        navButtons.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        hideSeedMenu();
        
        switch (btn.id) {
            case 'nav-warehouse': 
                updateWarehouseDisplay(); 
                warehouseModal.classList.remove('hidden'); 
                break;
            case 'nav-shop': 
                if (shopTabsContainer) {
                    shopTabsContainer.querySelectorAll('.tab-button').forEach(tab => tab.classList.remove('active'));
                }
    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å 'active' —Å–æ –≤—Å–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∫–ª–∞–¥–æ–∫
                tabContents.forEach(content => content.classList.remove('active'));

    // 2. –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–µ–º –≤–∫–ª–∞–¥–∫—É "–°–µ–º–µ–Ω–∞" –∞–∫—Ç–∏–≤–Ω–æ–π
                const seedsTabButton = shopTabsContainer.querySelector('.tab-button[data-tab="seeds"]');
                if (seedsTabButton) {
                       seedsTabButton.classList.add('active');
                }
                const seedsTabContent = document.getElementById('seeds-tab');
                if (seedsTabContent) {
                        seedsTabContent.classList.add('active');
                }
                populateShopSeeds();  // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–º–µ–Ω–∞
                populateShopTabs();   // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
                shopModal.classList.remove('hidden'); 
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É (—Å–µ–º–µ–Ω–∞) –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                shopTabsContainer.querySelector('.tab-button[data-tab="seeds"]').classList.add('active');
                document.getElementById('seeds-tab').classList.add('active');
                break;
            case 'nav-tasks': 
            case 'nav-leaders': 
            case 'nav-settings':
                tg.showAlert(`–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!`);
                navFarmBtn.click(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Ñ–µ—Ä–º—É
                break;
        }
    }));
    
    // --- –õ–û–ì–ò–ö–ê –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –í–ö–õ–ê–î–û–ö –í –ú–ê–ì–ê–ó–ò–ù–ï ---
    if (shopTabsContainer) {
        shopTabsContainer.addEventListener('click', (e) => {
            if (e.target.classList.contains('tab-button')) {
                shopTabsContainer.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
                tabContents.forEach(content => content.classList.remove('active'));
                
                e.target.classList.add('active');
                const tabId = e.target.dataset.tab;
                document.getElementById(`${tabId}-tab`).classList.add('active');
            }
        });
    }

    // --- –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–û–ö–£–ü–û–ö ---
    shopModal.addEventListener('click', (e) => {
        if (!e.target.classList.contains('buy-button') || e.target.disabled) {
            return;
        }

        const button = e.target;
        const itemType = button.dataset.itemType;
        const itemId = button.dataset.itemId;
        const seedId = button.dataset.seed;

        let price = 0;
        let itemData = null;

        if (seedId) {
            itemData = PLANT_DATA[seedId];
            price = itemData.seedCost;
        } else if (itemId && itemType) {
            switch (itemType) {
                case 'inventory': itemData = INVENTORY_DATA[itemId]; break;
                case 'booster':   itemData = BOOSTERS_DATA[itemId]; break;
                case 'decor':     itemData = DECOR_DATA[itemId]; break;
            }
            if (itemData) price = itemData.price;
        }

        if (!itemData || gameState.balance < price) {
            if (!itemData) return;
            tg.showAlert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!');
            return;
        }
        
        if ((itemType === 'inventory' || itemType === 'decor') && gameState.items[itemId]) {
            tg.showAlert('–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å!');
            return;
        }

        gameState.balance -= price;

        if (seedId) {
            gameState.seedInventory[seedId] = (gameState.seedInventory[seedId] || 0) + 1;
            document.getElementById(`inv-count-${seedId}`).innerText = `–í –Ω–∞–ª–∏—á–∏–∏: ${gameState.seedInventory[seedId]}`;
        } else if (itemId) {
            gameState.items[itemId] = true;
            button.disabled = true;
            button.innerText = '–ö—É–ø–ª–µ–Ω–æ';
        }

        updateBalanceDisplay();
        saveGameData();
        tg.HapticFeedback.notificationOccurred('success');
    });

    // --- –û–°–¢–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –ò–ì–†–´ ---
    function updateWarehouseDisplay() {
        warehouseList.innerHTML = '';
        const items = Object.keys(gameState.warehouse).filter(key => gameState.warehouse[key] > 0);
        if (items.length === 0) {
            warehouseList.innerHTML = '<li>–°–∫–ª–∞–¥ –ø—É—Å—Ç</li>';
            sellAllButton.style.display = 'none';
            return;
        }
        sellAllButton.style.display = 'block';
        items.forEach(crop => {
            const li = document.createElement('li');
            li.innerHTML = `<span>${crop} ${PLANT_DATA[crop].name}:</span> <span>${gameState.warehouse[crop]} —à—Ç.</span>`;
            li.style.display = 'flex';
            li.style.justifyContent = 'space-between';
            warehouseList.appendChild(li);
        });
    }
    function plantSeed(bed, seed) {
        const plantInfo = PLANT_DATA[seed];
        const growTimeInSeconds = plantInfo.growTime / 1000;
        let remainingTime = growTimeInSeconds;

    // 1. –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ä–æ—Å—Ç–∫–∞ –∏ —Ç–∞–π–º–µ—Ä–∞
        bed.innerHTML = ''; // –û—á–∏—â–∞–µ–º –≥—Ä—è–¥–∫—É –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        const plantElement = document.createElement('div');
        plantElement.classList.add('plant');
        plantElement.innerText = 'üå±'; // –†–æ—Å—Ç–æ–∫

        const timerElement = document.createElement('div');
        timerElement.classList.add('plant-timer'); // –ù–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏

        bed.appendChild(plantElement);
        bed.appendChild(timerElement);

    // 2. –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –ú–ú:–°–°
        function formatTime(seconds) {
            const min = Math.floor(seconds / 60);
            const sec = seconds % 60;
            return `${min.toString().padStart(2, '0')}:${sec.toString().padStart(2, '0')}`;
        }

        timerElement.innerText = formatTime(remainingTime); // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è

    // 3. –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        const timerInterval = setInterval(() => {
            remainingTime--;
            timerElement.innerText = formatTime(remainingTime);

        // 4. –ö–æ–≥–¥–∞ –≤—Ä–µ–º—è –≤—ã—à–ª–æ
            if (remainingTime <= 0) {
                clearInterval(timerInterval); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                bed.removeChild(timerElement); // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Ç–∞–π–º–µ—Ä–∞
            
                plantElement.innerText = seed; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ–ª—ã–π –æ–≤–æ—â
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–±—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π
                plantElement.addEventListener('click', (e) => {
                    e.stopPropagation();
                    animateHarvest(plantElement, seed);
                    gameState.warehouse[seed] = (gameState.warehouse[seed] || 0) + 1;
                    saveGameData();
                    bed.innerHTML = ''; // –û—á–∏—â–∞–µ–º –≥—Ä—è–¥–∫—É –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞
                    tg.HapticFeedback.notificationOccurred('success');
                }, { once: true });
            }
        }, 1000); // 1000 –º—Å = 1 —Å–µ–∫—É–Ω–¥–∞
    }
    
    
    function animateHarvest(startElement, seed) {
        const endElement = document.getElementById('nav-warehouse'); // –¶–µ–ª—å –∞–Ω–∏–º–∞—Ü–∏–∏
        const flyingCrop = document.createElement('div');
        flyingCrop.innerText = seed;
        flyingCrop.className = 'flying-crop';
        document.body.appendChild(flyingCrop);
        const startRect = startElement.getBoundingClientRect();
        const endRect = endElement.getBoundingClientRect();
        flyingCrop.style.left = `${startRect.left + startRect.width / 2 - 18}px`;
        flyingCrop.style.top = `${startRect.top + startRect.height / 2 - 18}px`;
        const deltaX = (endRect.left + endRect.width / 2) - (startRect.left + startRect.width / 2);
        const deltaY = (endRect.top + endRect.height / 2) - (startRect.top + startRect.height / 2);
        flyingCrop.style.setProperty('--target-x', `${deltaX}px`);
        flyingCrop.style.setProperty('--target-y', `${deltaY}px`);
        flyingCrop.addEventListener('animationend', () => flyingCrop.remove());
    }

    gardenContainer.addEventListener('click', (event) => {
        const bed = event.target.closest('.garden-bed.available');
        if (bed && bed.innerHTML === '') {
            activeBed = bed;
            showPlantingMenu(bed);
        }
    });
    
    function showPlantingMenu(bed) {
        const availableSeeds = Object.keys(gameState.seedInventory).filter(seed => gameState.seedInventory[seed] > 0);
        if (availableSeeds.length === 0) {
            tg.showAlert('–£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—è–Ω –¥–ª—è –ø–æ—Å–∞–¥–∫–∏. –ó–∞–π–¥–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω!');
            return;
        }

        seedMenu.innerHTML = '';
    
        const numItems = availableSeeds.length;
        const itemVisualWidth = 65;
        const screenEdgePadding = 25; 

    // --- –®–∞–≥ 1: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞–¥–∏—É—Å (–ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
        const rect = bed.getBoundingClientRect();
        const centerX = rect.left + rect.width / 2;
        const maxRadiusByPosition = Math.min(centerX, window.innerWidth - centerX) - screenEdgePadding;
        const idealCircumference = numItems * itemVisualWidth;
        let idealRadius = idealCircumference / (2 * Math.PI);
        if (numItems === 2) { idealRadius = 50; }
        const finalRadius = Math.max(55, Math.min(maxRadiusByPosition, idealRadius));

    // --- –®–∞–≥ 2: –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê "–£–ú–ù–û–ì–û –ü–û–í–û–†–û–¢–ê" ---
        const angleStep = (2 * Math.PI) / numItems;
        let angleOffset = -Math.PI / 2; // –ù–∞—á–∏–Ω–∞–µ–º —Å –∏–∫–æ–Ω–∫–∏ –Ω–∞–≤–µ—Ä—Ö—É (—É–≥–æ–ª -90 –≥—Ä–∞–¥—É—Å–æ–≤)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ –∫—Ä—É–≥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞
        const isTooFarRight = centerX + finalRadius > window.innerWidth - screenEdgePadding;
        const isTooFarLeft = centerX - finalRadius < screenEdgePadding;

    // –ï—Å–ª–∏ –∫—Ä—É–≥ —É–ø–∏—Ä–∞–µ—Ç—Å—è –≤ –ª–µ–≤—ã–π –∏–ª–∏ –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π...
        if (isTooFarLeft || isTooFarRight) {
        // ...–ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å—ë –º–µ–Ω—é –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É —à–∞–≥–∞ –º–µ–∂–¥—É –∏–∫–æ–Ω–∫–∞–º–∏.
        // –≠—Ç–æ –ø–æ–º–µ—Å—Ç–∏—Ç "–ø—É—Å—Ç–æ–µ" –º–µ—Å—Ç–æ —Ç–æ—á–Ω–æ –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é, —É–≤–æ–¥—è –∏–∫–æ–Ω–∫–∏ –≤–≤–µ—Ä—Ö –∏ –≤–Ω–∏–∑.
            angleOffset += angleStep / 2;
        }  
    
    // --- –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏ —Å —É—á–µ—Ç–æ–º –ø–æ–≤–æ—Ä–æ—Ç–∞ ---
        availableSeeds.forEach((seed, index) => {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π —Å–¥–≤–∏–≥ —É–≥–ª–∞
            const angle = angleOffset + index * angleStep;
        
            const x = finalRadius * Math.cos(angle);
            const y = finalRadius * Math.sin(angle);

            const option = document.createElement('div');
            option.className = 'seed-option';
            option.style.transform = `translate(${x}px, ${y}px)`;
        
            const count = gameState.seedInventory[seed];
            option.innerHTML = `
                <div class="seed-option-inner">
                    <span class="seed-emoji">${seed}</span>
                    <span class="seed-count">${count}</span>
                </div>
            `;
        
            option.addEventListener('click', (e) => {
                e.stopPropagation();
                handleSeedSelection(seed);
            });
            seedMenu.appendChild(option);
        });

    // –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const closeButton = document.createElement('div');
        closeButton.className = 'seed-menu-close-button';
        closeButton.innerHTML = '&times;';
        closeButton.addEventListener('click', (e) => {
            e.stopPropagation();
            hideSeedMenu();
        });
        seedMenu.appendChild(closeButton);

        seedMenu.style.left = `${centerX}px`;
        seedMenu.style.top = `${rect.top + rect.height / 2}px`;
        seedMenu.classList.remove('hidden');
    }
    function handleSeedSelection(seedType) {
        if (!activeBed) return;
        if ((gameState.seedInventory[seedType] || 0) > 0) {
            gameState.seedInventory[seedType]--;
            saveGameData();
            hideSeedMenu();
            plantSeed(activeBed, seedType);
            activeBed = null;
        } else {
            tg.showAlert(`–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–µ–º–µ–Ω–∞ ${PLANT_DATA[seedType].name}!`);
        }
    }

    function hideSeedMenu() {
        seedMenu.classList.add('hidden');
    }

    document.addEventListener('click', (e) => {
        if (!e.target.closest('#garden-container') && !e.target.closest('#seed-menu')) {
            hideSeedMenu();
        }
    });

    sellAllButton.addEventListener('click', () => {
        let totalProfit = 0;
        Object.keys(gameState.warehouse).forEach(crop => {
            totalProfit += gameState.warehouse[crop] * PLANT_DATA[crop].sellPrice;
        });
        if (totalProfit === 0) return;
        gameState.balance += totalProfit;
        gameState.warehouse = {};
        saveGameData();
        updateBalanceDisplay();
        updateWarehouseDisplay();
        tg.showPopup({ title: '–£—Ä–æ–∂–∞–π –ø—Ä–æ–¥–∞–Ω!', message: `–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ ${totalProfit.toFixed(2)} –º–æ–Ω–µ—Ç.` });
    });
    
    document.querySelectorAll('.modal').forEach(modal => {
        modal.querySelector('.close-button').addEventListener('click', () => {
            modal.classList.add('hidden');
            navFarmBtn.click();
        });
    });

    // --- –ó–ê–ü–£–°–ö –ò–ì–†–´ ---
    loadGameData();

}); // <-- –≠–¢–û –°–ê–ú–ê–Ø –í–ê–ñ–ù–ê–Ø –ó–ê–ö–†–´–í–ê–Æ–©–ê–Ø –°–ö–û–ë–ö–ê. –í–ï–°–¨ –ö–û–î –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –í–ù–£–¢–†–ò.

// –ó–ê–ö–û–ù–ß–ò–¢–ï –ö–û–ü–ò–†–û–í–ê–¢–¨ –ó–î–ï–°–¨
